面向对象思想：基于一切事物皆对象的思想，用人与人解决问题的思维方式去解决人机问题
面向对象由类和对象构成，类是由变量和方法，以及执行代码构成。
类是一类具有共同特征事物的统称，不特指具体事务，对象是指具有某些特征的某种具体事务，不是抽象概念。
面向对象的3大特性：继承、多态、封装。
继承：一个类可以通过继承，去获得其父类的公有的，自身没有的方法和变量，能够简化代码，方便变代码的管理和降低项目的开发难度
多态：基于继承，python中一个类可以继承多个类，同时它的父类又继承有父类，因此一个类可以使用多个类中的公有变量和方法。但一个类的父类只有一个，不存在具有多个父类的情况。
封装：主要使项目的开发更加简便、安全。简便体现在，封装可以将复杂的代码提前编写好，进行封装，使用时直接调用，不必重复编写。安全体现在在类中，我们通常定义类中变量为私有变量，设计类属性，使类中的方法可以被使用，但是不能改变类结构。

容器类型：字符串、字节、区间、元组、列表、集合、字典。
当我们保存的数据键值对时，使用字典；当要求字典中key值有序时使用otherdict，当使用key值进行切片处理时，key不存在时返回值为None，不报错，就使用defaultdict
当我们保存的数据是任意类型时：可以选择列表、元组、集合。当只对该集合类型进行查询操作时，我们选用元组，当要对集合类型进行修改时，我们通常采用列表，如果查询操作使用多，更新操作使用少，则用list，如果查询操作使用少，更新操作使用多，常用dept。集合常用于数据去重操作，也可以存放无需的任意类型。
当数据为一段连续整数时，我们常采用区间
保存的元素时字符时采用字符串，元素为字节时，采用字节类型

函数：相当于一段代码的封装，减少代码重复，提高项目开发效率。
函数由帮助信息、变量、执行代码、结束符（pass和return）构成。
函数中的参数由3中，必备参数、默认值参数、不定长参数
必备参数：调用函数必须传递的参数，参数直接传递
默认值参数：调用函数时如果不传参，则函数使用默认值；如果传参则只能使用关键字进行传参
元组不定长参数：相当于特殊的必备参数，可以传一个值，也可以传递多个值。函数自动将除必备参数以外的其他参数组成一个元组，传给元组不定长参数
字典不定长参数：在函数体中当作字典来使用，除了必备参数和默认值参数以外，其他参数被组成一个字典，传给不定长参数，key值为形参，value值为实参。

类：类由帮助信息、变量和方法、执行代码组成。类通过类对象来调用相应的变量和方法，也是一种封装的体现。

方法：是一种特殊的是函数，通常我们将类中函数称为方法。根据方法操作的变量类型不同分为实例方法、类方法、静态方法，实例方法主要操作实例变量、类方法主要用于操作类变量、静态方法只能操作全局变量和局部变量。

垃圾回收机制：垃圾回收机制主要有引用计数法、标记清除法、分代回收法
引用计数法：如果对象被引用数为0，则python解释器将判断该对象为垃圾，会根据一定的算法去回收该对象所占的堆空间。
标记清除法分为标记阶段，清除阶段
标记阶段：从根对象开始遍历，可以到达的对象，做一个标记，不能到达的对象不做处理。
清除阶段：将未标记的对象判定为垃圾，删除掉，将已标记的对象的标记清除掉。然后进行下一轮的标记。
根对象：全局变量、调用栈、寄存器
两种方法的对比：
引用计数法特点是高效、回收具有实时性、对象具有确定的生命周期、易于实现。但维护引用计数要消耗资源，同时不能有效解决相互引用的问题（孤岛）
标记清除法：主要是为了解决对象循环引用问题，主要作用对象为容器类型，是一种辅助的垃圾回收机制。但它的主要缺点是效率不高，即使只有小部分活动对象，也要扫描整个堆内存，才能做到垃圾回收。
异常处理机制：python中异常处理机制首先要从类的继承说起，baseexception类继承object类，exception类继承baseexception类，其他细分except类继承exception类，当try代码块发生异常后，先通过isinstance判断异常属于哪个类，然后捕获异常，执行对应except代码块中的代码，如果没办法解决，将异常抛出，所属对象都不能处理，就抛给python解释器。
抛出异常：在代码执行过程中如果出现问题，如果不能处理，将异常抛出：raise 异常类/异常对象
异常处理方案有：捕获异常，然后通过异常栈输出到控制台，常用于开发阶段。另一种是捕获异常后，通过异常信息输出到日志文件中，为以后修复bug提供依据，不影响其他正常功能的执行，常用于项目试运行或运行阶段。
三大设计模式：有装饰设计模式、单例设计模式、工厂设计模式
装饰设计模式：作用在项目中用于扩展函数功能。 @fun02  相当于fun01=fun02(fun01)
单例设计模式：作用是创建对象的一种方式，达到在项目运行过程中，该类的对象只有一个。
常用于网站计数器，web应用的配置数据的读取
懒汉式：在创建好类的同时就已经创建好对象，使用时直接加载
饿汉式：创建
工厂设计模式：也是创建对象的一种方式
LINUX系统的内核版本：4.8.0-36-generic
django项目开发中遇到的问题：1、在settings文件中配置全局变量，必须是英文大写，否则在models文件和views文件中导入settings模块，加载全部变量时会发现无法加载。2、在django框架在使用orm模型操作mysql数据库时，需要基于一个第三方库，但django自带的mysqldb库支持的是python2系列，python3项目直接使用会报错，找不到mysqldb库，因此我们使用python3进行项目开发时，需要需要导入pymysql去替代mysqldb的功能。

Django项目的缺点：当时在项目开发时，我们大部分对数据库的操作都是基于orm模型，使用python中的类去操作数据库中的表数据，这样开发虽然摆脱了复杂的sql语句，提高开发的效率，数据库迁移成本更低。但是也有其缺陷，性能较差，不适用于大型应用。好在项目是企业内部使用的，在方面倒没出现过问题。

Cookie和session的区别：cookie是保存在浏览器中的一组键值对，cookie的value值只能是字符串类型，当涉及到访问量过大、保存数据较多的情况时，要使用cookie，否则会导致服务器负载过大。Session是保存在服务器中的键值对，安全性较高，session的value值类型可以是任意类型，更方便操作。因此session常用于保存一些用户的重要信息。
Session其实也是基于cookie的，session的指针会保存在cookie中，当用户的登陆时，python会将浏览器中保存的session指针发给服务器，通过比对，找出对应的session数据，作用于钥匙类似。

Django项目的生命周期：登陆到相应的网页，请求会先发到uwsgi服务器，然后会将相应的请求发给django框架，经过中间件、路由到控制器，执行控制器中的函数，控制器将响应返给中间件，中间件再返给uwsgi服务器，uwsgi再将数据传给前台的模板标签中。

数据库：
备份：mysqldump -uroot -p db_03 t_01>备份目录
      mysqldump -uroot -p --database db_02 db_03 >备份目录
      mysqldump -uroot -p --all -database>备份目录
还原：mysql -uroot -p 库名 < 文件地址 
      Mysql -uroot -p < 备份目录

